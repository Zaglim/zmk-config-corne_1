 /*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

// Layer defines
#define BASE 0
#define MATH 1
#define NAVI 2
#define FUNC 3

// Special button defines
#define SWAUDIO LS(LC(LA(LG(A))))	//Switches audio source (in conjunction with custom shortcut script)
#define WSPCUP LC(LG(UP))		//Move up a workspace (in conjunction with custom GNOME shortcut)
#define WSPCDN LC(LG(DOWN))		//Move down a workspace (in conjunction with custom GNOME shortcut)

/ {
	combos {
		compatible = "zmk,combos";
        
		combo_esc {
			timeout-ms = <50>;
			key-positions = <1 2>;
			bindings = <&kp ESC>;
			layers = <0>;
        	};
        
        	combo_delete {
			timeout-ms = <50>;
			key-positions = <25 28>;
			bindings = <&kp DEL>;
		};
		
		// Presses LCTRL and LALT together, to de-bind keyboard from virtual machine (default kvm binding)
		combo_LCTRL_LALT {
			timeout-ms = <50>;
			key-positions = <19 20 21 22>;
			bindings = <&kp LC(LALT)>;
			layers = <0>;
		};
		
		combo_sleep {
			timeout-ms = <50>;
			key-positions = <7 8 9 10>;
			bindings = <&kp C_SLEEP>;
			layers = <0>;
		};
	};
	
	behaviours {
		hp: hold_preferred {
			compatible = "zmk,behavior-hold-tap";
			label = "HOLD_PREFERRED";
			#binding-cells = <2>;
			tapping-term-ms = <150>;
			quick_tap_ms = <200>;
			flavor = "hold-preferred";
			bindings = <&kp>, <&kp>;
		};
		
		zlt: zaglim_layer_tap {			//Designed for when tap is rarely desired
			compatible = "zmk,behavior-hold-tap";
			label = "ZAGLIM_LAYER_TAP";
			#binding-cells = <2>;
			tapping-term-ms = <50>;
			quick_tap_ms = <0>;
			flavor = "hold-preferred";
			bindings = <&mo>, <&kp>;
		};
		
	};
 

	keymap {
		compatible = "zmk,keymap";
		
		base_layer {
			bindings = <
	&kp TAB		&kp Q		&kp W		&kp F		&kp P		&kp B					&kp J		&kp L		&kp U		&kp Y		&kp SEMI	&sl FUNC
	&kp BSPC	&kp A		&kp R		&kp S		&kp T		&kp G					&kp M		&kp N		&kp E		&kp I		&kp O		&none
	&none		&kp Z		&kp X		&kp C		&kp D		&kp V					&kp K		&kp H		&kp COMMA	&kp DOT		&kp FSLH	&none
								&kp LCTRL	&zlt MATH SPC	&mt LGUI SPC		&hp RSHIFT RET &zlt NAVI RET	&kp RALT
			>;
		};
		
		math_layer {
			bindings = <
	&trans		&kp N1		&kp N2		&kp N3		&kp N4		&kp N5					&kp N6		&kp N7		&kp N8		&kp N9		&kp N0		&none
	&trans		&kp SPC		&kp LBKT	&kp MINUS	&kp PLUS	&kp LBRC				&kp RBRC	&kp BSLH	&kp APOS	&kp RBKT 	&kp SPC		&none
	&trans		&trans		&kp GRAVE	&kp UNDER	&kp EQUAL	&kp LT					&kp GT		&trans		&kp COMMA	&kp DOT		&kp FSLH	&none
								&trans		&trans		&trans			&trans		&trans		&trans
			>;
		};
		
		navigation_layer {
			bindings = <
	&trans		&mwh SCROLL_UP	&mwh SCROLL_LEFT &mmv MOVE_UP	&mwh SCROLL_RIGHT &kp PAGE_UP				&mkp MB3	&mkp MB1	&kp UP		&mkp MB2	&kp SWAUDIO	&none
	&trans		&mwh SCROLL_DOWN &mmv MOVE_LEFT	&mmv MOVE_DOWN	&mmv MOVE_RIGHT	&kp PAGE_DOWN				&kp HOME	&kp LEFT	&kp DOWN	&kp RIGHT	&kp END		&none
	&none		&kp C_VOL_DN	&kp C_VOL_UP	&none		&none		&none					&none		&mkp MB4	&mkp MB5	&kp WSPCUP	&kp WSPCDN	&none
								&trans		&trans		&trans			&trans		&trans		&trans
			>;
		};
		
		function_layer {
			bindings = <
	&trans		&kp F1		&kp F2		&kp F3		&kp F4		&kp F5					&kp F6		&kp F7		&kp F8		&kp F9		&kp F10		&none
	&trans		&kp F11		&kp F12		&none		&none		&none					&none		&none		&none		&none		&none		&none
	&none		&none		&none		&none		&none		&none					&none		&none		&none		&none		&none		&none
								&trans		&trans		&trans			&trans		&trans		&trans
			>;
		
		};
	};
};
